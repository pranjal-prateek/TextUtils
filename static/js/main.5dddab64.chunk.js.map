{"version":3,"sources":["components/Alert.js","components/Navbar.js","components/TextForm.js","App.js","index.js"],"names":["Alert","props","alert","className","type","role","word","lower","toLowerCase","charAt","toUpperCase","slice","capitalize","msg","data-bs-dismiss","aria-label","Navbar","mode","href","title","data-bs-toggle","data-bs-target","aria-controls","aria-expanded","id","aria-current","onClick","togglemode","htmlFor","defaultProps","about","TextForm","useState","text","setText","heading","value","placeholder","onChange","event","console","log","target","rows","newText","toLocaleUpperCase","newtextt","split","length","App","setalert","showalert","message","setTimeout","setmode","document","body","style","backgroundColor","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.5dddab64.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst Alert = (props) => {\r\n    const capitalize=(word)=>{\r\n        const lower=word.toLowerCase();\r\n        return lower.charAt(0).toUpperCase() + lower.slice(1);\r\n    }\r\n    return (\r\n      \r\n        props.alert && <div className={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\r\n        <strong>{capitalize(props.alert.type)}</strong>{props.alert.msg }\r\n  <button type=\"button\" className=\"btn-close\" data-bs-dismiss=\"alert\" aria-label=\"Close\"></button>\r\n</div>\r\n\r\n    )\r\n}\r\n\r\nexport default Alert\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n// import { Link } from 'react-router-dom'\r\n\r\nconst Navbar = (props) => {\r\n    return (\r\n        <>\r\n            <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n  <div className=\"container-fluid\">\r\n    <a className=\"navbar-brand\" href=\"#\">{props.title}</a>\r\n    <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"/navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n      <span className=\"navbar-toggler-icon\"></span>\r\n    </button>\r\n    <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n      <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n        <li className=\"nav-item\">\r\n          <a href=\"#\" className=\"nav-link active\" aria-current=\"page\" >Home</a>\r\n        </li>\r\n        {/* <li className=\"nav-item\">\r\n          <Link to=\"/about\" className=\"nav-link\" >{props.about}</Link>\r\n        </li> */}\r\n      </ul>\r\n      {/* <form className=\"d-flex\">\r\n        <input className=\"form-control me-2\" type=\"search\" placeholder=\"Search\" aria-label=\"Search\"/>\r\n        <button className=\"btn btn-outline-success\" type=\"submit\">Search</button>\r\n      </form> */}\r\n      <div className={`form-check form-switch \r\n      text-${props.mode==='light'?'dark':'light'}`}>\r\n  <input className=\"form-check-input\" type=\"checkbox\" id=\"flexSwitchCheckDefault\" onClick={props.togglemode}/>\r\n  <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">Dark mode</label>\r\n</div>\r\n    </div>\r\n  </div>\r\n</nav>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Navbar\r\n\r\n\r\nNavbar.propTypes={title:PropTypes.string.isRequired,\r\n                    about: PropTypes.string,}\r\n \r\nNavbar.defaultProps = {title:'set title here',\r\n                         about:'set about here'}","import React,{useState} from 'react'\r\n\r\n\r\nconst TextForm = (props) => {\r\n    const handlelowClick = ()=>{\r\n        console.log('lower case');\r\n        let newtextt =text.toLowerCase();\r\n        setText(newtextt)\r\n    }\r\n    const clearText = ()=>{\r\n        console.log('clear Text')\r\n        let newtext='';\r\n        setText(newtext)\r\n    }\r\n    const handleUpClick=()=>{\r\n        console.log('Uppercase');\r\n        let newText=text.toLocaleUpperCase();\r\n        setText(newText);\r\n    }\r\n    const handlleOnChange=(event)=>{\r\n        console.log('changed')\r\n        setText(event.target.value)\r\n    }\r\n    const [text,setText]=useState('');\r\n   \r\n    return (\r\n        <>\r\n        <div className=\"container\">\r\n        <h1>{props.heading}</h1>\r\n<div className=\"mb-3\">\r\n  <label htmlFor=\"myobx\" className=\"form-label\">Textarea</label>\r\n  <textarea className=\"form-control\" value={text} placeholder=\"enter text here\" onChange={handlleOnChange} id=\"mybox\" rows=\"8\"></textarea>\r\n</div> \r\n<button type=\"button\" className=\"btn btn-primary mx-2\" onClick={handleUpClick}>convert to Uppercase</button>\r\n<button type=\"button\" className=\"btn btn-success\" onClick={handlelowClick}>convert to Lowercase</button>\r\n<button type=\"button\" className=\"btn btn-danger max-4\" onClick={clearText}>clear text</button>\r\n        </div>\r\n        <div className=\"container my-3\">\r\n            <h2>your text summary</h2>\r\n            <p>{text.split(\" \").length} words, {text.length} characters</p>\r\n            <p>{0.008*text.split(\" \").length+\" \"}Minutes to read</p>\r\n            <h3>Preview</h3>\r\n            <p><b><i>{text}</i></b></p>\r\n        </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default TextForm\r\n","import React,{useState} from 'react'\nimport Alert from './components/Alert';\nimport About from './components/About'\nimport Navbar from './components/Navbar'\nimport TextForm from './components/TextForm'\n// import {BrowserRouter as Router,Switch,Route,Link} from 'react-router-dom'\nconst App = () => {\n  const [alert,setalert]=useState(null);\n  const showalert=(message,type) => {\n    setalert({\n      msg: message,\n      type: type\n    })\n    setTimeout(() => {\n    setalert(null)  \n    }, 3000);\n  }\n\n  const [mode,setmode]=useState('light');   //dark mode enable or not\n  const togglemode=()=>{\n    if(mode==='light'){\n      setmode('dark');\n      document.body.style.backgroundColor='grey';\n      showalert('Dark mode has been enabled','success');\n    }\n    else{\n      setmode('light')\n      document.body.style.backgroundColor='white';\n      showalert('light mode has been enabled','success');\n    }\n  }\n  return (\n    <>\n      {/* <Router> */}\n      <Navbar title=\"TextUtils\" about=\"About\" mode={mode} togglemode={togglemode} />\n      <Alert alert={alert}/>\n      <div className=\"container\">\n      {/* <Switch> */}\n          {/* <Route exact path=\"/about\"> */}\n            {/* <About /> */}\n          {/* </Route> */}\n          {/* <Route exact path=\"/\"> */}\n          <TextForm heading=\"Enter the text to analyze\"/> \n          {/* </Route> */}\n            \n      {/* </Switch> */}\n      \n      {/* <About></About> */}\n      </div>\n      {/* </Router> */}\n     \n    </>\n  )\n}\n\nexport default App\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n\n"],"sourceRoot":""}